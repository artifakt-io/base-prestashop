version: "3"

volumes:
  placeholder-data:
  varnish-data:
  varnish-conf:
  nginxfpm-conf:
  mysql-data:
  app-code:
  data:
  grafana_data:
  prometheus-data:

services:
  #      _                _ _           _   _
  #     / \   _ __  _ __ | (_) ___ __ _| |_(_) ___  _ __
  #    / _ \ | '_ \| '_ \| | |/ __/ _` | __| |/ _ \| '_ \
  #   / ___ \| |_) | |_) | | | (_| (_| | |_| | (_) | | | |
  #  /_/   \_\ .__/| .__/|_|_|\___\__,_|\__|_|\___/|_| |_|
  #          |_|   |_|
  proxy:
    platform: linux/arm64
    image: jwilder/nginx-proxy
    container_name: system_nginx-proxy_1
    restart: always
    ports:
      - "8000:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./.artifakt/etc/nginx-proxy/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf:ro
      - ./.artifakt/apache/certs:/etc/nginx/certs
    networks:
      - app
      - nginx

  proxy-companion:
    platform: linux/arm64
    container_name: proxy-companion
    image: registry.artifakt.io/nginx-proxy-companion:latest
    restart: always
    environment:
      - "NGINX_PROXY_CONTAINER=system_nginx-proxy_1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./.artifakt/apache/certs:/etc/nginx/certs
    networks:
      - app
      - nginx

  varnish:
    platform: linux/arm64
    image: registry.artifakt.io/varnish:6.6
    container_name: varnish
    volumes:
      - ./.artifakt/etc/varnish/default.vcl:/etc/varnish/default.vcl:ro
      - varnish-data:/var/lib/varnish
      - varnish-conf:/etc/varnish/conf.d
    ports:
      - "8888:80"
    environment:
      - VIRTUAL_HOST= localhost
      - SELF_SIGNED_HOST= localhost
    restart: always
    networks:
      - app

  nginx:
    platform: linux/arm64
    image: registry.artifakt.io/nginx-fpm:1.21
    container_name: nginx
    volumes:
      # - ./:/var/www/html:rw
      - app-code:/var/www/code
      - data:/data:ro
      - ./.artifakt/etc/nginx/default.conf:/etc/nginx/nginx.conf:ro
      - nginxfpm-conf:/etc/nginx/conf.d
    env_file:
      - ./.env
    networks:
      - nginx
      - app
  app:
    build: .
    container_name: app
    env_file:
      - ./.env
    volumes:
      # - ./:/var/www/html:rw
      - "./data:/data"
      - varnish-conf:/conf/varnish
      - nginxfpm-conf:/conf/nginxfpm
      - app-code:/var/www/code
    restart: always
    expose:
      - 9000
    networks:
      - app
  mysql:
    platform: linux/arm64
    image: liupeng0518/mysql:5.7-arm64
    restart: always
    volumes:
      - ./.artifakt/etc/mysql/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf:ro
      - mysql-data:/var/lib/mysql:rw
      #- ./share:/tmp/share
    env_file:
      - .env
    ports:
      - "3306:3306"
    container_name: mysql
    networks:
      - app
  redis:
    platform: linux/arm64
    image: redis:6.0-alpine
    container_name: redis
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./.artifakt/etc/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - app

  #   __  __             _ _             _
  #  |  \/  | ___  _ __ (_) |_ ___  _ __(_)_ __   __ _
  #  | |\/| |/ _ \| '_ \| | __/ _ \| '__| | '_ \ / _` |
  #  | |  | | (_) | | | | | || (_) | |  | | | | | (_| |
  #  |_|  |_|\___/|_| |_|_|\__\___/|_|  |_|_| |_|\__, |
  #                                              |___/
  prometheus:
    image: prom/prometheus:latest
    container_name: "prometheus"
    volumes:
      - ./.artifakt/monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - monitoring
  grafana:
    image: grafana/grafana
    hostname: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - "grafana_data:/var/lib/grafana"
      - ./.artifakt/monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - ./.artifakt/monitoring/grafana/grafana.ini:/etc/grafana/config.ini
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=bruno.pinchede@artifakt.io
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - "9100:9100"
    networks:
      - monitoring

  #https://hub.docker.com/r/nginx/nginx-prometheus-exporter
  # nginx-exporter:
  #   platform: linux/arm64
  #   image: nginx/nginx-prometheus-exporter:latest
  #   container_name: "nginx-exporter"
  #   command:
  #     - "-nginx.scrape-uri=http://nginx:8080/stub_status"
  #   ports:
  #     - "9113:9113"
  #   networks:
  #     - monitoring
  #     - nginx
  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: mysql-exporter
    environment:
      - DATA_SOURCE_NAME=prestashopuser:prestashop@(mysql:3306)/prestashop
      - collect.info_schema.tablestats=true
      - collect.info_schema.userstats=true
      - collect.info_schema.query_response_time=true
      - collect.auto_increment.columns=true
      - collect.binlog_size=true
      - collect.perf_schema.eventsstatements=true
      - collect.perf_schema.eventswaits=true
      - collect.perf_schema.file_events=true
      - collect.perf_schema.indexiowaits=true
      - collect.perf_schema.tableiowaits=true
      - collect.perf_schema.tablelocks=true
    ports:
      - 9104:9104
    depends_on:
      - mysql
    volumes:
      - ./.artifakt/mysql-exporter/.my.cnf:/root/.my.cnf
    networks:
      - monitoring
      - app

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: cadvisor
    ports:
      - "8084:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - monitoring

networks:
  monitoring:
    name: monitoring
  app:
    name: application
  nginx:
    name: nginx
